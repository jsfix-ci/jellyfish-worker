/*
 * Copyright (C) Balena.io - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

const Bluebird = require('bluebird')
const skhema = require('skhema')
const uuid = require('@balena/jellyfish-uuid')
const logger = require('@balena/jellyfish-logger').getLogger(__filename)

exports.evaluate = ({
	transformers,
	oldCard,
	newCard,
	eventType,
	context,
	query,
	executeAndAwaitAction
}) => {
	if (!transformers || !Array.isArray(transformers)) {
		return null
	}

	if (!oldCard) {
		return null
	}

	// Only evaluate transformers if `data.$transformer.artifactReady` has been toggled to true,
	// indicating that the corresponding artefact is available in the registry
	if (!oldCard.data.$transformer.artifactReady && newCard.data.$transformer.artifactReady === true) {
		return Bluebird.map(transformers, async (transformer) => {
			// TODO: Allow transformer input filter to match $$links, by re-using the trigger filter
			const match = transformer.data.inputFilter && skhema.isValid(transformer.data.inputFilter, newCard)

			if (match) {
				// The transformer should be run on behalf of the actor that owns the
				// transformer
				const [ transformerActor ] = await query({
					$$links: {
						owns: {
							type: 'object',
							properties: {
								id: {
									const: transformer.id
								}
							}
						}
					},
					type: 'object'
				}, {
					limit: 1
				})

				if (transformerActor) {
					const actionRequest = {
						card: 'task@1.0.0',
						type: 'type',
						action: 'action-create-card@1.0.0',
						actor: transformerActor.id,
						arguments: {
							reason: null,
							properties: {
								name: `Transform ${newCard.id} using transformer ${transformer.id}`,
								data: {
									input: newCard,
									transformer,
									actor: transformerActor.id,
									workerFilter: {
										schema: transformer.data.workerFilter
									}
								}
							}
						}
					}

					// Re enqueue an action request to call the matchmaking function
					// TODO: link task to origin transformer
					const result = await executeAndAwaitAction(actionRequest)

					// TODO: Improve core API for linking cards
					await executeAndAwaitAction({
						card: 'link@1.0.0',
						type: 'type',
						action: 'action-create-card@1.0.0',
						actor: transformerActor.id,
						arguments: {
							reason: null,
							properties: {
								type: 'link@1.0.0',
								slug: `link-${transformer.id}-generated-${result.data.id}-${await uuid.random()}`,
								name: 'generated',
								data: {
									inverseName: 'was generated by',
									from: {
										id: transformer.id,
										type: transformer.type
									},
									to: {
										id: result.data.id,
										type: result.data.type
									}
								}
							}
						}
					})
				} else {
					logger.warn(context, 'Cannot run transformer that does not have an owner', {
						transformer: transformer.id
					})
				}
			}
		})
	}
	return null
}
